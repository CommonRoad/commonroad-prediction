stages:
  - style_check
  - test
  - build
  - deploy

default:
  image: python:3.10
  before_script:
    - apt-get update && apt-get install -y cmake build-essential git pkg-config ca-certificates wget libomp-dev libeigen3-dev libboost-all-dev uuid-dev libcgal-dev
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install --with docs,dev,tests,tutorials
    - source .venv/bin/activate

.run-test-with-coverage: &run-test-with-coverage
  - coverage run --source crpred -m pytest
  - coverage report -m || true

# static_check
formatting_check:
  stage: style_check
  script:
    - black --check .
    - isort --check-only .

lint_flake8:
  stage: style_check
  script:
    - pip install "flake8~=6.1.0"
    - flake8 ./tests ./crpred ./docs ./tutorials

test_python_versions:
  image : python:$PYTHON_VERSIONS
  stage: test
  parallel :
    matrix :
      - PYTHON_VERSIONS : [ "3.9", "3.10", "3.11" ]
  script:
    - *run-test-with-coverage
  needs: []

test_latest_python_version_and_coverage:
  image: python:3.12
  stage: test
  script:
    - *run-test-with-coverage
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

pages:
  stage: deploy
  when: manual
  publish: site
  only :
    - main
  script:
    - mkdocs build
  artifacts:
    paths:
      - site
  environment:
    name: Gitlab Pages
    url: https://cps.pages.gitlab.lrz.de/commonroad/commonroad-prediction/

build_pages:
  stage: deploy
  script:
    - mkdocs build
  artifacts:
    paths:
      - site
  needs: []

push_to_internal_pipy_registry:
  stage: deploy
  when: manual
  only:
    - develop
  script:
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry build
    - poetry publish --repository gitlab -u gitlab-ci-token -p ${CI_JOB_TOKEN}

push_to_external_pipy_test_registry:
  stage: deploy
  when: manual
  only:
    - main
  script:
    - poetry config repositories.test https://test.pypi.org/legacy/
    - poetry build
    - poetry publish --repository test -u __token__ -p ${CR_PYPI_TEST_API_TOKEN}

push_to_external_pipy_release_registry:
  stage: deploy
  when: manual
  only:
    - main
  script:
    - poetry build
    - poetry publish -u __token__ -p ${CR_PYPI_RELEASE_API_TOKEN}
